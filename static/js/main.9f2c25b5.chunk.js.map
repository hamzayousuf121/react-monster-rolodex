{"version":3,"sources":["components/Search.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","type","onChange","handlechange","placeholder","Cards","monster","map","userss","key","id","src","name","alt","email","App","useEffect","fetch","then","res","json","data","setUsers","useState","user","search","setSearch","SeacrhField","filterMonster","filter","toLowerCase","includes","e","target","value","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"4PAUeA,MARf,SAAgBC,GACZ,OACI,yBAAKC,UAAU,OACX,2BAAOC,KAAK,SAASD,UAAU,aAAaE,SAAUH,EAAMI,aAAcC,YAAaL,EAAMK,gBCmB1FC,MAtBf,SAAeN,GACX,OAEI,oCACKA,EAAMO,QAAQC,KAAI,SAAAC,GAEf,OACI,yBAAKR,UAAU,2CAA2CS,IAAKD,EAAOE,IAClE,yBAAKV,UAAU,QACX,yBAAKA,UAAU,4BAA4BW,IAAG,gCAA2BH,EAAOI,KAAlC,QAA8CC,IAAKL,EAAOI,OACxG,yBAAKZ,UAAU,aACX,wBAAIA,UAAU,cAAcQ,EAAOI,MACnC,uBAAGZ,UAAU,cAAcQ,EAAOM,e,MCuBnDC,MAhCf,WAEEC,qBAAU,WACRC,MAAM,8CACHC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAI,OAAIC,EAASD,QACxB,IANU,MAOYE,mBAAS,IAPrB,mBAONC,EAPM,KAOAF,EAPA,OAQeC,mBAAS,IARxB,mBAQNE,EARM,KAQEC,EARF,KAUPC,EAAcF,EAGdG,EAJWJ,EAIcK,QAAO,SAAAvB,GAAO,OAAIA,EAAQM,KAAKkB,cAAcC,SAASJ,EAAYG,kBACjG,OAEE,yBAAK9B,UAAU,OAGb,kBAAC,EAAD,CAAQI,YAAa,sBAAuBD,aAAc,SAAC6B,GAAD,OAAON,EAAUM,EAAEC,OAAOC,UACpF,+CAEA,yBAAKlC,UAAU,aACb,yBAAKA,UAAU,OACb,kBAAC,EAAD,CAAOM,QAASsB,QCjBpBO,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxB,MAAK,SAAA6B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,YAI1BC,QAAQC,IACN,iHAKEZ,GAAUA,EAAOa,UACnBb,EAAOa,SAAST,KAMlBO,QAAQC,IAAI,sCAGRZ,GAAUA,EAAOc,WACnBd,EAAOc,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC1FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDYnB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,yBAAwB7B,OAAOC,SAAS6B,MACpDC,SAAW/B,OAAOC,SAAS8B,OAIvC,OAGF/B,OAAOgC,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,yBAAN,sBAEP/B,IAgEV,SAAiCO,EAAOC,GAEtC1B,MAAMyB,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BpD,MAAK,SAAAqD,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM1D,MAAK,SAAA6B,GACjCA,EAAa8B,aAAa3D,MAAK,WAC7BmB,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Be,OAAM,WACLJ,QAAQC,IACN,oEAvFAwB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM1D,MAAK,WACjCoC,QAAQC,IACN,iHAMJd,EAAgBC,EAAOC,OCtC/BE,K","file":"static/js/main.9f2c25b5.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Search(props) {\r\n    return (\r\n        <div className=\"m-3\">\r\n            <input type=\"search\" className=\"seachField\" onChange={props.handlechange} placeholder={props.placeholder} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react'\r\n\r\nfunction Cards(props) {\r\n    return (\r\n\r\n        <>\r\n            {props.monster.map(userss => {\r\n\r\n                return (\r\n                    <div className=\"col-lg-4 col-md-6 col-12 my-3 box-shadow\" key={userss.id}>\r\n                        <div className=\"card\">\r\n                            <img className=\"card-img-top w-100 m-auto\" src={`https://robohash.org/ ${userss.name}.png`} alt={userss.name} />\r\n                            <div className=\"card-body\">\r\n                                <h5 className=\"card-title\">{userss.name}</h5>\r\n                                <p className=\"card-title\">{userss.email}</p>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Cards\r\n","import React from 'react';\nimport { useEffect, useState } from 'react';\nimport Search from './components/Search';\nimport Cards from './components/Cards';\nimport './App.css';\nfunction App() {\n\n  useEffect(() => {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(res => res.json())\n      .then(data => setUsers(data))\n  }, [])\n  const [user, setUsers] = useState([]);\n  const [search, setSearch] = useState('');\n  const monsters = user;\n  const SeacrhField = search;\n\n  // const handleChange = e =>  console.log(e.target.value)\n  const filterMonster = monsters.filter(monster => monster.name.toLowerCase().includes(SeacrhField.toLowerCase()))\n  return (\n\n    <div className=\"App\">\n\n\n      <Search placeholder={'Serach Montser here'} handlechange={(e) => setSearch(e.target.value)} />\n      <h1>Monster RoloDex</h1>\n\n      <div className=\"container\">\n        <div className=\"row\">\n          <Cards monster={filterMonster} />\n        </div>\n      </div>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\nserviceWorker.register();\n"],"sourceRoot":""}